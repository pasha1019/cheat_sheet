git init

git status

git add

git commit -m ' '

# Выведет все изменения, сделанные в рабочей директории
# которые были добавлены в индекс
git diff --staged

# Тут выводится диф между этим коммитом и предыдущим
git show 5120bea3e5528c29f8d1da43731cbe895892eb6d

# Послений изменивший файл
git blame INFO.md

# Поиск строк в файлах 
git grep
# Флаг `i` позволяет искать без учета регистра
git grep -i hexlet
README.md:Hello, Hexlet! How are you?
# Поиск в конкретном коммите
git grep Hexlet 5120bea
# Поиск по всей истории
# Возвращаем список хешей коммитов `rev-list`
git grep Hexlet $(git rev-list --all)

# Выполняем очистку. Команда удалит все неотслеживаемые файлы
# -f – force, -d – directory
git clean -fd

# Отмена изменений
git restore INFO.md

# Отмена изменений, если их подготовили к коммиту 
git restore --staged INFO.md

# Откат коммита. Этой команде нужен идентификатор коммита
git revert aa600a43cb164408e4ad87d216bc679d097f1a6c

# Удаление коммита. Важно, что мы не делаем git push
git reset --hard HEAD~
git reset HEAD~2 - откат на 2 коммита

# Увидели, что забыли добавить файл
# Добавляем
git add README.md
git commit --amend
# После этой команды откроется редактор, ожидающий ввода описания коммита
# Здесь можно поменять сообщение или выйти из редактора, оставив старое

# Перевод состояния рабочей директории на определенный коммит
git checkout <hash>

# Проверка в каком коммите менялся файл
git log -- <file>

# Очистка кэша после добавления файла в .gitignore
git rm <file> --cached

# Добавить файлы в хранилище
git stash
# Возвращаем последние изменения
git stash pop
